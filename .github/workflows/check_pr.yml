#
# Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation. Alibaba designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#

name: Prerequisites

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
    outputs:
      should_run:
        value: ${{ jobs.prerequisites.outputs.should_run }}
      bundle_id:
        value: ${{ jobs.prerequisites.outputs.bundle_id }}
      jdk_version:
        value: ${{ jobs.prerequisites.outputs.jdk_version }}
      platform_linux_x64:
        value: ${{ jobs.prerequisites.outputs.platform_linux_x64 }}
      platform_linux_aarch64:
        value: ${{ jobs.prerequisites.outputs.platform_linux_aarch64 }}
      platform_windows_x64:
        value: ${{ jobs.prerequisites.outputs.platform_windows_x64 }}
      platform_riscv64:
        value: ${{ jobs.prerequisites.outputs.platform_riscv64 }}
      dependencies:
        value: ${{ jobs.prerequisites.outputs.dependencies }}

jobs:
  check_commit:
    name: 'Check Commit Message'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dragonwell-releng/check_commit_action@master
    if: github.event_name == 'pull_request'

  prerequisites:
    name: 'Prerequisites'
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_submit.outputs.should_run }}
      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}
      jdk_version: ${{ steps.check_jdk_versions.outputs.jdk_version }}
      platform_linux_x64: ${{ steps.check_platforms.outputs.platform_linux_x64 }}
      platform_linux_aarch64: ${{ steps.check_platforms.outputs.platform_linux_aarch64 }}
      platform_windows_x64: ${{ steps.check_platforms.outputs.platform_windows_x64 }}
      platform_riscv64: ${{ steps.check_platforms.outputs.platform_riscv64 }}
      dependencies: ${{ steps.check_deps.outputs.dependencies }}

    steps:
      - name: 'Check if submit tests should actually run depending on secrets and manual triggering'
        id: check_submit
        run: echo "::set-output name=should_run::${{ inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/')) }}"

      - name: 'Check which platforms should be included'
        id: check_platforms
        run: |
          echo "::set-output name=platform_linux_x64::${{ contains(inputs.platforms, 'linux x64') || (inputs.platforms == '') }}"
          echo "::set-output name=platform_linux_aarch64::${{ contains(inputs.platforms, 'linux aarch64') || (inputs.platforms == '') }}"
          echo "::set-output name=platform_windows_x64::${{ contains(inputs.platforms, 'windows x64') || (inputs.platforms == '') }}"
          echo "::set-output name=platform_riscv64::${{ contains(inputs.platforms, 'riscv64') || (inputs.platforms == '') }}"
        if: steps.check_submit.outputs.should_run != false

      - name: 'Determine unique bundle identifier'
        id: check_bundle_id
        run: echo "::set-output name=bundle_id::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}"
        if: steps.check_submit.outputs.should_run != 'false'

      - name: 'Checkout the source'
        uses: actions/checkout@v3
        with:
          path: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: 'Determine versions and locations to be used for dependencies'
        id: check_deps
        run: "echo ::set-output name=dependencies::`cat make/autoconf/version-numbers make/conf/test-dependencies | sed -e '1i {' -e 's/#.*//g' -e 's/\"//g' -e 's/\\(.*\\)=\\(.*\\)/\"\\1\": \"\\2\",/g' -e '$s/,\\s\\{0,\\}$/\\}/'`"
        working-directory: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: 'Print extracted dependencies to the log'
        run: "echo '${{ steps.check_deps.outputs.dependencies }}'"
        if: steps.check_submit.outputs.should_run != 'false'

      - name: 'Determine full JDK versions'
        id: check_jdk_versions
        shell: bash
        run: |
          FEATURE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_FEATURE }}
          INTERIM=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_INTERIM }}
          UPDATE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_UPDATE }}
          PATCH=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_PATCH }}
          if [ "x${PATCH}" != "x0" ]; then
             V=${FEATURE}.${INTERIM}.${UPDATE}.${PATCH}
          elif [ "x${UPDATE}" != "x0" ]; then
             V=${FEATURE}.${INTERIM}.${UPDATE}
          elif [ "x${INTERIM}" != "x0" ]; then
             V={FEATURE}.${INTERIM}
          else
             V=${FEATURE}
          fi
          echo "::set-output name=jdk_version::${V}"
        if: steps.check_submit.outputs.should_run != 'false'
